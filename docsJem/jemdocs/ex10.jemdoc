# jemdoc: menu{MENU}{ex10.html},addpackage{amsmath},addpackage{amssymb}
# jemdoc: addcss{jemdoc.css}
# jemdoc: addcss{bibover.css}
#include{masterFile_2.jeminc}
#include{mj-complete-bib_3.jeminc}
= Reaction-diffusion equation

=== Problem
Consider the frequency responses of the reaction-diffusion equation with
homogeneous Neumann boundary conditions, with a
spatially distributed, temporally harmonic body force, $d(y,t) = d(y)\,\mathrm{e}^{\mathrm i\,\omega\,t}$,

\(
\begin{align}
\phi_{t}(y,t) \;&=\;  \phi_{yy}(y,t)  \,-\, \epsilon^2\,\phi (y,t) \, + \, d(y,t),\label{eq:0}  \\
\end{align}
\)
\n
with homogeneous Neumann boundary conditions,
\(
\begin{align}
[\partial_y \phi (\cdot, t)](\pm 1) \;& =\; 0, \label{eq:0bc}
\end{align}
\)
where $t$ is time, $y \in \left[ -1, 1 \right]$ is a spatial variable, and $ \epsilon \in \mathbb{R}$. 


The temporal Fourier transform can be used to represent the frequency response operator associated with Eqs.~$\eqref{eq:0}$-$\eqref{eq:0bc}$ as a TPBVP,
\(
\begin{align}
    \left[\mathcal A(\omega)\,\phi(\cdot)\right] (y) 
    \;&=\; 
    \left[\mathcal B(\omega)\, d(\cdot)\right](y),\notag\\
    \xi (y)
    \;&=\; 
    \left[\mathcal C(\omega)\,\phi(\cdot)\right](y),\label{eq:mot1c}\\
    [\mathcal{L}_a \, \phi(\cdot)](a)  \;&=\; [\mathcal{L}_b \, \phi(\cdot)](b) \;=\;  0,\notag
  \end{align}  
\)
where,
\(
	\mathcal A (\omega)
	\;=\;  
	({\mathrm i} \omega \, +  \, \epsilon^2) I
	\; - \;
	\mathrm D^2,
	\quad
	\mathcal B 
	\;=\; 
	\mathcal C 
	\;=\; 
	I,
	\quad
	\mathcal {L}_{\pm 1} 
	\; = \; 
	\mathrm D,
\)
where $\mathrm D = \mathrm d /\mathrm dy$.

Specify the operators $\mathcal A (\omega)$, $\mathcal B(\omega) $, and $\mathcal C(\omega) $ in Eq.~$\eqref{eq:mot1c}$, in SISC\+\+ and solve for the singular values of Eq.~$\eqref{eq:mot1c}$.

=== Solution
Specifying the differential equation and boundary condition is very similar the to [/ex01.html reaction-diffusion system]. The last part of the solution will involve calling the class SingularValueDecomposition to solve for frequency responses.

The program is relatively intuitive and is listed here.
~~~
{}{cpp}
#define SIS_USE_LAPACK
#include <fstream> // To output data to files
#include <iostream>
#include <sis.hpp>

using namespace std;
typedef complex<double> Cd_t;

int main() {
  using namespace sis;
  N = 63; // sis::N, Defined in sis.hpp. This specifies no. of Chebyshev
          // coefficients
  sis_setup();

  LinopMat<Cd_t> Lmat(1, 1), Mmat(1,1);
  Linop<double> D2(2), D1(1), D0(0); // Linops with highest order 2, 1 and 0.
  Cd_t ii(0.0,1.0);

  D2.coef << 1.0, 0.0, 0.0; // for (1.0 * D2 + 0.0 * D1 + (0.0) )v
  D1.coef << 1.0, 0.0;
  D0.coef << 1.0;




  // Operator D2v - 4 v
  Lmat << D2 - 0.0001 * D0;
  Mmat << 1.0;

  double omega = 0.0;
  // Specify boundary conditions via BcMat, lbc and rbc separately:
  BcMat<Cd_t> lbcs(1, 1), rbcs(1,1);

  lbcs.L << D1;
  rbcs.L << D1;
  lbcs.eval << -1.0, // evaluate bcs.L right end
  rbcs.eval <<  1.0;          // evaluate bcs.L at 0.5, must be a value in domain [-1, 1]

  SingularValueDecomposition<Cd_t> svds;

  LinopMat<Cd_t> A(1,1), B(1,1), C(1,1);
  A = (ii*omega*Mmat) - Lmat;
  B(0,0) = 1.0;
  C(0,0) = 1.0;
  // Compute first 12 singular values
  svds.compute(A, B, C, lbcs, rbcs, 12);

  cout << "Singular Values: \n" << svds.eigenvalues << '\n';
  cout << "Power Spectral Density: \n" << svds.PowerSpectralDensity(A,B,C,lbcs,rbcs) << '\n';
  
  return 0;
}
~~~